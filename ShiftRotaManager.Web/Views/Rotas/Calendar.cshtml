<!-- --- ShiftRotaManager.Web/Views/Rotas/Calendar.cshtml --- -->
@{
    ViewData["Title"] = "Rota Calendar";
    var teamMembers = ViewBag.TeamMembers as SelectList;
    var shifts = ViewBag.Shifts as SelectList;
    var rotaStatuses = ViewBag.RotaStatuses as SelectList;
}

<h1 class="text-center mb-4">Rota Calendar</h1>

<div class="card shadow-sm rounded-3 p-4 mb-4">
    <h5 class="card-title mb-3">Filter Rotas</h5>
    <div class="row g-3">
        <div class="col-md-4">
            <label for="filterTeamMember" class="form-label">Team Member:</label>
            <select id="filterTeamMember" class="form-select rounded">
                <option value="">All Team Members</option>
                @foreach (var tm in teamMembers)
                {
                    <option value="@tm.Value">@tm.Text</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label for="filterShift" class="form-label">Shift Type:</label>
            <select id="filterShift" class="form-select rounded">
                <option value="">All Shifts</option>
                @foreach (var s in shifts)
                {
                    <option value="@s.Value">@s.Text</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label for="filterStatus" class="form-label">Status:</label>
            <select id="filterStatus" class="form-select rounded">
                <option value="">All Statuses</option>
                @foreach (var status in rotaStatuses)
                {
                    <option value="@status.Value">@status.Text</option>
                }
            </select>
        </div>
    </div>
    <div class="mt-3 text-end">
        <button id="applyFilters" class="btn btn-primary rounded-pill">Apply Filters</button>
        <button id="clearFilters" class="btn btn-outline-secondary rounded-pill">Clear Filters</button>
    </div>
</div>

<div id='calendar' class="shadow-sm rounded-3 p-3 bg-white"></div>

@section Scripts {
    <link href='~/lib/fullcalendar/main.min.css' rel='stylesheet' />

    <!-- Corrected FullCalendar JS Imports Order:
         1. Core library (index.global.min.js)
         2. Locales (locales-all.min.js)
         3. Premium License (if applicable)
         4. Plugins (interaction, resource-timegrid, resource-daygrid)
    -->
    @* <script src="~/lib/fullcalendar/index.global.min.js"></script>
    <script src="~/lib/fullcalendar/locales-all.min.js"></script>
    <script src="~/lib/fullcalendar/interaction.global.min.js"></script>
    <script src="~/lib/fullcalendar/daygrid.global.min.js"></script>
    <script src="~/lib/fullcalendar/timegrid.global.min.js"></script>
    <script src="~/lib/fullcalendar/resource.global.min.js"></script> <!-- Add this line -->
    <script src="~/lib/fullcalendar/resource-daygrid.global.min.js"></script>
    <script src="~/lib/fullcalendar/resource-timegrid.global.min.js"></script> *@

    <script src="~/lib/fullcalendar/core/index.global.min.js"></script>
    <script src="~/lib/fullcalendar/core/locales-all.global.min.js"></script>
    <script src="~/lib/fullcalendar/interaction/index.global.min.js"></script>
    <script src="~/lib/fullcalendar/daygrid/index.global.min.js"></script>
    <script src="~/lib/fullcalendar/timegrid/index.global.min.js"></script>
    <script src="~/lib/fullcalendar/list/index.global.min.js"></script>
    <script src="~/lib/fullcalendar/resource/index.global.min.js"></script>
    <script src="~/lib/fullcalendar/resource-daygrid/index.global.min.js"></script>
    <script src="~/lib/fullcalendar/resource-timegrid/index.global.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', async function() {
            var calendarEl = document.getElementById('calendar');

            let allTeamMembers = [];
            try {
                const teamMembersResponse = await fetch('/api/TeamMembers');
                if (!teamMembersResponse.ok) {
                    throw new Error(`HTTP error! status: ${teamMembersResponse.status}`);
                }
                allTeamMembers = await teamMembersResponse.json();
                console.log('Fetched Team Members:', allTeamMembers); // Debugging log
            } catch (error) {
                console.error('Error fetching team members for resources:', error);
                // Use custom alert instead of native alert
                showCustomAlert('Error', 'Could not load team members for calendar resources. Please check the console for details.');
            }

            // Transform team members into FullCalendar resource format
            // Added nullish coalescing operator (?? '') to ensure properties are strings
            const resources = Array.isArray(allTeamMembers)
                ? allTeamMembers
                    .filter(tm => tm && tm.id && (tm.firstName !== undefined || tm.lastName !== undefined))
                    .map(tm => ({
                        id: tm.id,
                        title: `${tm.firstName ?? ''} ${tm.lastName ?? ''}`.trim()
                    }))
                : [];
            console.log('Transformed Resources:', resources); // Debugging log
            console.log('Resources:', resources);

            var calendar = new FullCalendar.Calendar(calendarEl, {
                plugins: [
                    FullCalendar.dayGridPlugin,
                    FullCalendar.timeGridPlugin,
                    FullCalendar.listPlugin,
                    FullCalendar.interactionPlugin,
                    FullCalendar.resourcePlugin,
                    FullCalendar.resourceDayGridPlugin,
                    FullCalendar.resourceTimeGridPlugin
                ], // Ensure all required plugins are listed
                initialView: 'dayGridMonth', // Default view
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay,resourceTimeGridDay,resourceTimeGridWeek' // Added resource views
                },
                locale: 'en-gb', // Or your preferred locale
                editable: true, // Allow drag-and-drop
                selectable: true,
                droppable: true, // Allow external elements to be dropped (not used in this POC, but good to enable)
                resources: resources, // Define resources for resource views
                resourceAreaColumns: [
                        {
                            field: 'title',
                            headerContent: 'Team Member'
                        }
                    ],
                // Fetch events from your API endpoint
                events: function(fetchInfo, successCallback, failureCallback) {
                    const teamMemberId = document.getElementById('filterTeamMember').value;
                    const shiftId = document.getElementById('filterShift').value;
                    const status = document.getElementById('filterStatus').value;

                    const params = new URLSearchParams({
                        start: fetchInfo.startStr,
                        end: fetchInfo.endStr
                    });

                    if (teamMemberId) params.append('teamMemberId', teamMemberId);
                    if (shiftId) params.append('shiftId', shiftId);
                    if (status) params.append('status', status);

                    fetch(`/Rotas/GetCalendarRotas?${params.toString()}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            successCallback(data);
                        })
                        .catch(error => {
                            console.error('Error fetching rotas:', error);
                            showCustomAlert('Error', 'There was an error while fetching rotas!');
                            failureCallback(error);
                        });
                },
                eventClick: function(info) {
                    // Custom action on event click
                    // info.event.id is the Rota ID
                    // info.event.extendedProps.status is the RotaStatus string

                    // Custom modal for confirmation instead of alert/confirm
                    showCustomConfirm(`Rota for "${info.event.title}"`, `What would you like to do?`, [
                        { text: 'Edit', action: () => {
                            if (info.event.url) {
                                window.location.href = info.event.url; // Redirect to edit page
                            }
                        }},
                        { text: 'Delete', action: () => {
                            showCustomConfirm('Confirm Delete', `Confirm DELETE for "${info.event.title}"? This cannot be undone.`, [
                                { text: 'Yes, Delete', action: () => {
                                    fetch(`/api/rotas/${info.event.id}`, {
                                        method: 'DELETE',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        }
                                    })
                                    .then(response => {
                                        if (response.ok) {
                                            showCustomAlert('Success', 'Rota deleted successfully!');
                                            calendar.refetchEvents(); // Refresh calendar
                                        } else {
                                            showCustomAlert('Error', 'Failed to delete rota.');
                                            console.error('Delete failed:', response.statusText);
                                        }
                                    })
                                    .catch(error => {
                                        showCustomAlert('Error', 'An error occurred during deletion.');
                                        console.error('Delete error:', error);
                                    });
                                }},
                                { text: 'Cancel', action: () => {} }
                            ]);
                        }},
                        { text: 'Assign (if Open)', action: () => {
                            if (info.event.extendedProps.status === 'Open') {
                                window.location.href = `/Rotas/AssignOpenShift/${info.event.id}`;
                            } else {
                                showCustomAlert('Info', 'This is not an open shift.');
                            }
                        }}
                    ]);

                    info.jsEvent.preventDefault(); // Prevent default browser action
                },
                eventDrop: function(info) {
                    // Called when an event is dragged and dropped to a new date/time
                    const newDate = info.event.start.toISOString().split('T')[0]; // Get YYYY-MM-DD
                    const newStartTime = info.event.start.toTimeString().split(' ')[0]; // Get HH:MM:SS
                    const newEndTime = info.event.end.toTimeString().split(' ')[0]; // Get HH:MM:SS

                    let newTeamMemberId = null;
                    if (info.newResource) { // If dropped onto a resource
                        newTeamMemberId = info.newResource.id;
                    } else if (info.event.extendedProps.teamMemberId) {
                        // If not dropped on a new resource, retain the original team member
                        newTeamMemberId = info.event.extendedProps.teamMemberId;
                    }

                    // Prepare data for API call
                    const updateData = {
                        newDate: newDate,
                        newStartTime: newStartTime,
                        newEndTime: newEndTime,
                        newTeamMemberId: newTeamMemberId,
                        newPairedTeamMemberId: info.event.extendedProps.pairedTeamMemberId || null // Preserve paired if exists
                    };

                    showCustomConfirm('Confirm Move', `Are you sure you want to move "${info.event.title}" to ${newDate}?`, [
                        { text: 'Yes, Move', action: () => {
                            fetch(`/api/rotas/${info.event.id}/update-datetime`, {
                                method: 'PUT',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(updateData)
                            })
                            .then(response => {
                                if (response.ok) {
                                    showCustomAlert('Success', 'Rota updated successfully!');
                                    // No need to refetch if the update was successful and FullCalendar already moved it
                                } else {
                                    showCustomAlert('Error', 'Failed to update rota. Reverting changes.');
                                    info.revert(); // Revert the drag if API call fails
                                    response.json().then(error => console.error('API Error:', error));
                                }
                            })
                            .catch(error => {
                                showCustomAlert('Error', 'An error occurred during update. Reverting changes.');
                                console.error('Fetch error:', error);
                                info.revert(); // Revert on network error
                            });
                        }},
                        { text: 'Cancel', action: () => info.revert() } // Revert if user cancels
                    ]);
                },
                // Customize event rendering for better display
                eventContent: function(arg) {
                    let title = arg.event.title;
                    let timeText = arg.timeText ? `<div class="fc-event-time">${arg.timeText}</div>` : '';

                    let eventEl = document.createElement('div');
                    eventEl.innerHTML = `${timeText}<div class="fc-event-title">${title}</div>`;

                    return { domNodes: [eventEl] };
                }
            });

            calendar.render();

            // Filter button event listeners
            document.getElementById('applyFilters').addEventListener('click', function() {
                calendar.refetchEvents(); // Re-fetch events with current filter values
            });

            document.getElementById('clearFilters').addEventListener('click', function() {
                document.getElementById('filterTeamMember').value = '';
                document.getElementById('filterShift').value = '';
                document.getElementById('filterStatus').value = '';
                calendar.refetchEvents(); // Re-fetch events with cleared filters
            });

            // --- Custom Alert/Confirm Modals (instead of alert/confirm) ---
            function showCustomAlert(title, message) {
                const modalHtml = `
                    <div class="modal fade" id="customAlertModal" tabindex="-1" aria-labelledby="customAlertModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content rounded-3 shadow-lg">
                                <div class="modal-header bg-primary text-white rounded-top-3">
                                    <h5 class="modal-title" id="customAlertModalLabel">${title}</h5>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body p-4">
                                    <p>${message}</p>
                                </div>
                                <div class="modal-footer justify-content-center p-3">
                                    <button type="button" class="btn btn-primary rounded-pill px-4" data-bs-dismiss="modal">OK</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                const alertModal = new bootstrap.Modal(document.getElementById('customAlertModal'));
                alertModal.show();
                document.getElementById('customAlertModal').addEventListener('hidden.bs.modal', function () {
                    this.remove(); // Clean up modal from DOM after closing
                });
            }

            function showCustomConfirm(title, message, buttons) {
                const modalId = 'customConfirmModal';
                let buttonHtml = '';
                buttons.forEach((btn, index) => {
                    const btnClass = index === 0 ? 'btn-primary' : 'btn-outline-secondary';
                    buttonHtml += `<button type="button" class="btn ${btnClass} rounded-pill px-4 mx-2" data-action-index="${index}">${btn.text}</button>`;
                });

                const modalHtml = `
                    <div class="modal fade" id="${modalId}" tabindex="-1" aria-labelledby="${modalId}Label" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content rounded-3 shadow-lg">
                                <div class="modal-header bg-primary text-white rounded-top-3">
                                    <h5 class="modal-title" id="${modalId}Label">${title}</h5>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body p-4">
                                    <p>${message}</p>
                                </div>
                                <div class="modal-footer justify-content-center p-3">
                                    ${buttonHtml}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                const confirmModalElement = document.getElementById(modalId);
                const confirmModal = new bootstrap.Modal(confirmModalElement);

                confirmModalElement.querySelectorAll('button[data-action-index]').forEach(button => {
                    button.addEventListener('click', function() {
                        const actionIndex = parseInt(this.dataset.actionIndex);
                        buttons[actionIndex].action();
                        confirmModal.hide();
                    });
                });

                confirmModal.show();
                confirmModalElement.addEventListener('hidden.bs.modal', function () {
                    this.remove(); // Clean up modal from DOM after closing
                });
            }
        });
    </script>
}
