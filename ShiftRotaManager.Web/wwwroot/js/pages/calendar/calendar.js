document.addEventListener('DOMContentLoaded', function () {
    const calendarEl = document.getElementById('calendar');
    const loadingEl = document.getElementById('calendar-loading');

    // Get URLs from data attributes. These are generated by the server in the Razor view.
    const getRotasUrl = calendarEl.dataset.getRotasUrl;
    const createRotaUrl = calendarEl.dataset.createRotaUrl;
    const deleteRotaUrl = calendarEl.dataset.deleteRotaUrl;

    const calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        locale: 'en-gb',
        editable: false,
        selectable: true,
        dayMaxEvents: true,

        loading: function (isLoading) {
            loadingEl.style.display = isLoading ? 'flex' : 'none';
        },

        dateClick: function (info) {
            const createUrl = new URL(createRotaUrl, window.location.origin);
            createUrl.searchParams.append('startDate', info.dateStr);
            createUrl.searchParams.append('endDate', info.dateStr);
            window.location.href = createUrl.href;
        },

        eventsSet: function (info) {
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            document.querySelectorAll('.fc-daygrid-day').forEach(function (dayEl) {
                const dateStr = dayEl.getAttribute('data-date');
                if (!dateStr) return;

                const date = new Date(dateStr + 'T00:00:00');

                if (date < today) {
                    dayEl.classList.remove('fc-day-no-events');
                    return;
                }

                const dayHasEvents = Array.isArray(info.events) && info.events.some(event => {
                    const eventStart = event.start;
                    if (!eventStart) return false;
                    return eventStart.toISOString().split('T')[0] === dateStr;
                });

                if (!dayHasEvents) {
                    dayEl.classList.add('fc-day-no-events');
                } else {
                    dayEl.classList.remove('fc-day-no-events');
                }
            });
        },

        eventClick: function (info) {
            info.jsEvent.preventDefault();
            if (info.event.url) {
                window.location.href = info.event.url;
            }
        },

        events: {
            url: getRotasUrl,
            failure: function (failureInfo) {
                console.error('Error fetching rotas:', failureInfo.error);
                calendarEl.innerHTML = `<div class="alert alert-danger" role="alert">
                                                    <strong>Error:</strong> Could not load rota data. Please try refreshing the page.
                                                </div>`;
            }
        },

        eventClassNames: function (arg) {
            const status = arg.event.extendedProps.status?.toLowerCase();
            const shiftName = arg.event.extendedProps.shiftName?.toLowerCase();

            if (!status) return [];

            let classNames = [`fc-event-status-${status}`];

            if (status === 'covered' && shiftName) {
                if (shiftName.includes('morning')) {
                    classNames.push('fc-event-shift-morning');
                } else if (shiftName.includes('evening')) {
                    classNames.push('fc-event-shift-evening');
                } else if (shiftName.includes('night')) {
                    classNames.push('fc-event-shift-night');
                }
            }
            return classNames;
        },

        eventContent: function (arg) {
            let containerEl = document.createElement('div');
            containerEl.classList.add('d-flex', 'align-items-center', 'justify-content-between', 'w-100');

            // Create the main content element (for editing)
            let contentEl = document.createElement('div');
            contentEl.classList.add('fc-event-title', 'fc-event-main');
            contentEl.style.flexGrow = '1';
            contentEl.innerHTML = arg.event.title;

            // Create the delete button element
            let deleteBtn = document.createElement('span');
            deleteBtn.classList.add('delete-icon', 'ms-2');
            deleteBtn.innerHTML = '<i class="fas fa-trash-alt" style="color: #dc3545;"></i>';
            deleteBtn.style.cursor = 'pointer';

            deleteBtn.addEventListener('click', function (e) {
                e.stopPropagation();
                e.preventDefault();

                const rotaId = arg.event.id;
                if (rotaId) {
                    if (confirm('Are you sure you want to delete this rota?')) {
                        const deleteUrl = new URL(deleteRotaUrl, window.location.origin);
                        deleteUrl.searchParams.append('id', rotaId);
                        window.location.href = deleteUrl.href;
                    }
                }
            });

            containerEl.appendChild(contentEl);
            containerEl.appendChild(deleteBtn);

            return { domNodes: [containerEl] };
        }
    });

    calendar.render();
});