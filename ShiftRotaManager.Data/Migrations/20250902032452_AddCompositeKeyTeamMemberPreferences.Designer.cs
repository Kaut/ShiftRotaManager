// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShiftRotaManager.Data.Data;

#nullable disable

namespace ShiftRotaManager.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250902032452_AddCompositeKeyTeamMemberPreferences")]
    partial class AddCompositeKeyTeamMemberPreferences
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("RotaPairedTeamMember", b =>
                {
                    b.Property<Guid>("RotaId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("TEXT");

                    b.HasKey("RotaId", "TeamMemberId");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("RotaPairedTeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.AnnualLeave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("AnnualLeaves");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.CoverageHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("RequiredStaffCount")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CoverageHours");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Illness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("IllnessRecords");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Overtime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Hours")
                        .HasColumnType("REAL");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("OvertimeRecords");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Rota", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TeamMemberId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("Rotas");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsNightShift")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxStaffAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinStaffRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.ShiftVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BaseShiftId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTimeOffset")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTimeOffset")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BaseShiftId");

                    b.ToTable("ShiftVariants");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.TeamMemberPreference", b =>
                {
                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("TEXT");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("TeamMemberId", "DayOfWeek", "ShiftId");

                    b.HasIndex("ShiftId");

                    b.ToTable("TeamMemberPreferences");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.TimeOffInLieu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("HoursAccrued")
                        .HasColumnType("REAL");

                    b.Property<double>("HoursUsed")
                        .HasColumnType("REAL");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("TimeOffInLieu");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("RotaPairedTeamMember", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.Rota", null)
                        .WithMany()
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", null)
                        .WithMany()
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.AnnualLeave", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "TeamMember")
                        .WithMany("AnnualLeaves")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Illness", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "TeamMember")
                        .WithMany("IllnessRecords")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Overtime", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "TeamMember")
                        .WithMany("OvertimeRecords")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Rota", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.Shift", "Shift")
                        .WithMany("Rotas")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "TeamMember")
                        .WithMany("Rotas")
                        .HasForeignKey("TeamMemberId");

                    b.Navigation("Shift");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.ShiftVariant", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.Shift", "BaseShift")
                        .WithMany("Variants")
                        .HasForeignKey("BaseShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseShift");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.TeamMember", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.TeamMemberPreference", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "TeamMember")
                        .WithMany("Preferences")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.TimeOffInLieu", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "TeamMember")
                        .WithMany("TimeOffInLieu")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.UserRole", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "TeamMember")
                        .WithMany("UserRoles")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Shift", b =>
                {
                    b.Navigation("Rotas");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.TeamMember", b =>
                {
                    b.Navigation("AnnualLeaves");

                    b.Navigation("IllnessRecords");

                    b.Navigation("OvertimeRecords");

                    b.Navigation("Preferences");

                    b.Navigation("Rotas");

                    b.Navigation("TimeOffInLieu");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
