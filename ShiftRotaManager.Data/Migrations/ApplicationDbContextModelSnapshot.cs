// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShiftRotaManager.Data.Data;

#nullable disable

namespace ShiftRotaManager.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShiftRotaManager.Data.Models.AnnualLeave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("AnnualLeaves");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.CoverageHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("RequiredStaffCount")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("CoverageHours");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Illness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("IllnessRecords");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Overtime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Hours")
                        .HasColumnType("float");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("OvertimeRecords");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000001"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000002"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000003"),
                            Name = "Reader"
                        });
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Rota", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PairedTeamMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeamMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PairedTeamMemberId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("Rotas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0000000-0000-0000-0000-000000000001"),
                            Date = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShiftId = new Guid("b0000000-0000-0000-0000-000000000001"),
                            Status = 0,
                            TeamMemberId = new Guid("d0000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("e0000000-0000-0000-0000-000000000002"),
                            Date = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShiftId = new Guid("b0000000-0000-0000-0000-000000000001"),
                            Status = 0,
                            TeamMemberId = new Guid("d0000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("e0000000-0000-0000-0000-000000000003"),
                            Date = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShiftId = new Guid("b0000000-0000-0000-0000-000000000002"),
                            Status = 0,
                            TeamMemberId = new Guid("d0000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("e0000000-0000-0000-0000-000000000004"),
                            Date = new DateTime(2025, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShiftId = new Guid("b0000000-0000-0000-0000-000000000003"),
                            Status = 0,
                            TeamMemberId = new Guid("d0000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("e0000000-0000-0000-0000-000000000005"),
                            Date = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShiftId = new Guid("b0000000-0000-0000-0000-000000000001"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e0000000-0000-0000-0000-000000000006"),
                            Date = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PairedTeamMemberId = new Guid("d0000000-0000-0000-0000-000000000004"),
                            ShiftId = new Guid("b0000000-0000-0000-0000-000000000002"),
                            Status = 0,
                            TeamMemberId = new Guid("d0000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsNightShift")
                        .HasColumnType("bit");

                    b.Property<int>("MaxStaffAllowed")
                        .HasColumnType("int");

                    b.Property<int>("MinStaffRequired")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000001"),
                            Duration = new TimeSpan(0, 8, 0, 0, 0),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsNightShift = false,
                            MaxStaffAllowed = 5,
                            MinStaffRequired = 2,
                            Name = "Morning Shift",
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000002"),
                            Duration = new TimeSpan(0, 8, 0, 0, 0),
                            EndTime = new TimeSpan(0, 22, 0, 0, 0),
                            IsNightShift = false,
                            MaxStaffAllowed = 5,
                            MinStaffRequired = 2,
                            Name = "Afternoon Shift",
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000003"),
                            Duration = new TimeSpan(0, 8, 0, 0, 0),
                            EndTime = new TimeSpan(0, 6, 0, 0, 0),
                            IsNightShift = true,
                            MaxStaffAllowed = 3,
                            MinStaffRequired = 1,
                            Name = "Night Shift",
                            StartTime = new TimeSpan(0, 22, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.ShiftVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTimeOffset")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTimeOffset")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BaseShiftId");

                    b.ToTable("ShiftVariants");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0000000-0000-0000-0000-000000000001"),
                            Email = "alice.smith@example.com",
                            FirstName = "Alice",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = new Guid("d0000000-0000-0000-0000-000000000002"),
                            Email = "bob.j@example.com",
                            FirstName = "Bob",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = new Guid("d0000000-0000-0000-0000-000000000003"),
                            Email = "charlie.b@example.com",
                            FirstName = "Charlie",
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = new Guid("d0000000-0000-0000-0000-000000000004"),
                            Email = "david.l@example.com",
                            FirstName = "David",
                            LastName = "Lee"
                        });
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.TimeOffInLieu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("HoursAccrued")
                        .HasColumnType("float");

                    b.Property<double>("HoursUsed")
                        .HasColumnType("float");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("TimeOffInLieu");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("a0000000-0000-0000-0000-000000000001"),
                            TeamMemberId = new Guid("d0000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("f0000000-0000-0000-0000-000000000002"),
                            RoleId = new Guid("a0000000-0000-0000-0000-000000000002"),
                            TeamMemberId = new Guid("d0000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("f0000000-0000-0000-0000-000000000003"),
                            RoleId = new Guid("a0000000-0000-0000-0000-000000000002"),
                            TeamMemberId = new Guid("d0000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("f0000000-0000-0000-0000-000000000004"),
                            RoleId = new Guid("a0000000-0000-0000-0000-000000000002"),
                            TeamMemberId = new Guid("d0000000-0000-0000-0000-000000000004")
                        });
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.AnnualLeave", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "TeamMember")
                        .WithMany("AnnualLeaves")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Illness", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "TeamMember")
                        .WithMany("IllnessRecords")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Overtime", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "TeamMember")
                        .WithMany("OvertimeRecords")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Rota", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "PairedTeamMember")
                        .WithMany()
                        .HasForeignKey("PairedTeamMemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShiftRotaManager.Data.Models.Shift", "Shift")
                        .WithMany("Rotas")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "TeamMember")
                        .WithMany("Rotas")
                        .HasForeignKey("TeamMemberId");

                    b.Navigation("PairedTeamMember");

                    b.Navigation("Shift");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.ShiftVariant", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.Shift", "BaseShift")
                        .WithMany("Variants")
                        .HasForeignKey("BaseShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseShift");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.TimeOffInLieu", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "TeamMember")
                        .WithMany("TimeOffInLieu")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.UserRole", b =>
                {
                    b.HasOne("ShiftRotaManager.Data.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShiftRotaManager.Data.Models.TeamMember", "TeamMember")
                        .WithMany("UserRoles")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.Shift", b =>
                {
                    b.Navigation("Rotas");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("ShiftRotaManager.Data.Models.TeamMember", b =>
                {
                    b.Navigation("AnnualLeaves");

                    b.Navigation("IllnessRecords");

                    b.Navigation("OvertimeRecords");

                    b.Navigation("Rotas");

                    b.Navigation("TimeOffInLieu");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
